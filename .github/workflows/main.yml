name: Flutter CI/CD with Firebase Distribution

on:
  push:
    branches: [ main ]

jobs:
  # build-android:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       flutter-version: '3.29.2'
  #       channel: 'stable'
    
  #   - name: Install dependencies
  #     run: flutter pub get
    
  #   - name: Build APK
  #     run: flutter build apk 
  #     env:
  #       ANDROID_SDK_ROOT: /usr/lib/android-sdk
        
  #   - name: Upload APK to Firebase App Distribution
  #     uses: wzieba/Firebase-Distribution-Github-Action@v1
  #     with:
  #       appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
  #       token: ${{ secrets.FIREBASE_CLI_TOKEN }}
  #       groups: testers  # or your preferred group
  #       file: build/app/outputs/flutter-apk/app-release.apk
  #       releaseNotes: "Automatic build from GitHub Actions (Commit: ${{ github.sha }})"

  #   - name: Upload APK as artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: app-release.apk
  #       path: build/app/outputs/flutter-apk/app-release.apk
  #       retention-days: 7


  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      - name: Install dependencies
        run: flutter pub get
      - name: Setup CocoaPods
        run: |
          cd ios
          echo "=== CocoaPods Setup ==="
          pod --version
          echo "Cleaning previous pod installation..."
          pod deintegrate || echo "No previous pod installation found"
          echo "Installing pods..."
          # Suppress the CocoaPods configuration warning (it's cosmetic)
          pod install --repo-update 2>&1 | grep -v "CocoaPods did not set the base configuration" || true
          echo "✅ CocoaPods setup completed"
      - name: Install Apple certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
      - name: Install provisioning profile (manual)
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # Decode and save the provisioning profile
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > /tmp/profile.mobileprovision
          
          # Extract UUID and profile info
          echo "=== Extracting provisioning profile details ==="
          UUID=$(security cms -D -i /tmp/profile.mobileprovision 2>/dev/null | plutil -extract UUID raw - 2>/dev/null || echo "")
          PROFILE_NAME=$(security cms -D -i /tmp/profile.mobileprovision 2>/dev/null | plutil -extract Name raw - 2>/dev/null || echo "")
          
          if [ -z "$UUID" ]; then
            echo "UUID extraction failed, using timestamp-based filename..."
            UUID="profile-$(date +%s)"
          else
            echo "✅ Extracted UUID: $UUID"
            echo "✅ Profile Name: $PROFILE_NAME"
            
            # Store UUID for later use in ExportOptions.plist
            echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV
            echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          fi
          
          echo "Using filename: $UUID.mobileprovision"
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          # List installed profiles for verification
          echo "=== Installed profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Verify the profile contains our bundle identifier
          echo "=== Checking profile content ==="
          if security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision 2>/dev/null | grep -q "com.example.flutterRiverpodTutorial1"; then
            echo "✅ Bundle ID found in provisioning profile"
          else
            echo "⚠️  Bundle ID not found in profile, but continuing..."
            echo "Expected: com.example.flutterRiverpodTutorial1"
            echo "Profile contents (bundle IDs):"
            security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision 2>/dev/null | grep -o "com\.[^<]*" | head -5 || echo "Could not extract bundle IDs"
          fi
          
          # Check what type of profile this is
          echo "=== Profile Type Analysis ==="
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision 2>/dev/null | plutil -extract Entitlements.get-task-allow raw - 2>/dev/null && echo "Profile type: Development" || echo "Profile type: Distribution/AdHoc"
      - name: Verify code signing setup
        run: |
          echo "=== Verifying Certificates ==="
          security find-identity -v -p codesigning
          
          echo "=== Finding the correct certificate name ==="
          CERT_NAME=$(security find-identity -v -p codesigning | grep "66VPE47DN4" | head -1 | sed 's/.*) "\(.*\)"/\1/')
          if [ -n "$CERT_NAME" ]; then
            echo "✅ Found certificate: $CERT_NAME"
            echo "SIGNING_CERTIFICATE=$CERT_NAME" >> $GITHUB_ENV
          else
            echo "⚠️  Could not find certificate with team ID 66VPE47DN4"
            echo "Available certificates:"
            security find-identity -v -p codesigning
          fi
          
          echo "=== Verifying Provisioning Profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "=== Profile Details ==="
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            if [ -f "$profile" ]; then
              echo "Profile: $(basename "$profile")"
              PROFILE_NAME=$(security cms -D -i "$profile" 2>/dev/null | plutil -extract Name raw - 2>/dev/null || echo "Could not extract name")
              PROFILE_UUID=$(security cms -D -i "$profile" 2>/dev/null | plutil -extract UUID raw - 2>/dev/null || echo "Could not extract UUID")
              echo "  Name: $PROFILE_NAME"
              echo "  UUID: $PROFILE_UUID"
              
              # Check if this profile matches our bundle ID
              if security cms -D -i "$profile" 2>/dev/null | grep -q "com.example.flutterRiverpodTutorial1"; then
                echo "  ✅ Matches bundle ID"
                echo "PROVISIONING_PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
              else
                echo "  ⚠️  Does not match bundle ID"
              fi
              echo "---"
            fi
          done
      - name: Update ExportOptions.plist with correct UUID
        run: |
          echo "=== Updating ExportOptions.plist with actual provisioning profile UUID ==="
          
          # Use the UUID extracted from the provisioning profile
          if [ -n "$PROFILE_UUID" ]; then
            echo "Using provisioning profile UUID: $PROFILE_UUID"
            echo "Profile name: $PROFILE_NAME"
            
            # Create updated ExportOptions.plist with the correct UUID
            cat > ios/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>66VPE47DN4</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <false/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.example.flutterRiverpodTutorial1</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>compileBitcode</key>
              <false/>
              <key>destination</key>
              <string>export</string>
          </dict>
          </plist>
          EOF
            
            echo "✅ Updated ExportOptions.plist with UUID: $PROFILE_UUID"
          else
            echo "⚠️  No profile UUID available, keeping current ExportOptions.plist"
          fi
          
          echo "=== Final ExportOptions.plist ==="
          cat ios/ExportOptions.plist
      - name: Build IPA
        run: |
          echo "Starting Flutter IPA build..."
          echo "=== Build Environment Info ==="
          flutter --version
          xcodebuild -version
          
          echo "=== Current ExportOptions.plist ==="
          cat ios/ExportOptions.plist
          
          echo "=== Available Certificates ==="
          security find-identity -v -p codesigning
          
          echo "=== Building IPA with Flutter ==="
          flutter build ipa \
            --dart-define=APP_ENV=production \
            --export-options-plist=ios/ExportOptions.plist \
            --verbose 2>&1 | tee flutter_build.log
          
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "Flutter build exit code: $BUILD_EXIT_CODE"
          
          # Check what files were created regardless of exit code
          echo "=== Checking created files ==="
          find build -name "*.ipa" -o -name "*.xcarchive" 2>/dev/null | sort || echo "No IPA or archive files found"
          
          # Check if IPA was actually created (Flutter sometimes reports success even when export fails)
          if [ -f "build/ios/ipa/flutter_riverpod_tutorial.ipa" ]; then
            echo "✅ IPA file was successfully created"
          else
            echo "❌ IPA file was NOT created, even though Flutter may report success"
            echo "This indicates an export failure. Checking logs..."
            
            # Look for export failures in the log
            if grep -q "EXPORT FAILED\|exportArchive.*error" flutter_build.log; then
              echo "=== Export Failure Detected ==="
              grep -A 10 -B 5 "EXPORT FAILED\|exportArchive.*error" flutter_build.log
            fi
            
            # Check for provisioning profile errors
            if grep -q "No.*profiles.*matching" flutter_build.log; then
              echo "=== Provisioning Profile Error ==="
              grep -A 5 -B 5 "No.*profiles.*matching" flutter_build.log
            fi
            
            # Set BUILD_EXIT_CODE to 1 to indicate failure
            BUILD_EXIT_CODE=1
            
            echo "=== Attempting Alternative Export Method ==="
            echo "Trying ad-hoc export method as fallback..."
            
            # Create alternative ExportOptions.plist for ad-hoc distribution
            cat > ios/ExportOptions-adhoc.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>66VPE47DN4</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <false/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>compileBitcode</key>
              <false/>
              <key>destination</key>
              <string>export</string>
          </dict>
          </plist>
          EOF
            
            echo "=== Trying manual export with ad-hoc method ==="
            cd ios
            if [ -d "build/Runner.xcarchive" ]; then
              xcodebuild -exportArchive \
                -archivePath build/Runner.xcarchive \
                -exportPath ../build/ios/ipa \
                -exportOptionsPlist ExportOptions-adhoc.plist 2>&1 | tee ../adhoc_export.log
              
              ADHOC_EXIT_CODE=${PIPESTATUS[0]}
              cd ..
              
              if [ $ADHOC_EXIT_CODE -eq 0 ] && [ -f "build/ios/ipa/flutter_riverpod_tutorial.ipa" ]; then
                echo "✅ Ad-hoc export succeeded!"
                BUILD_EXIT_CODE=0
              else
                echo "❌ Ad-hoc export also failed"
                cat adhoc_export.log
              fi
            else
              echo "❌ No archive found for manual export"
              cd ..
            fi
          fi
          
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "❌ Build failed - showing detailed error information:"
            
            echo "=== Certificate/Signing Errors ==="
            grep -i -A 2 -B 2 "certificate\|signing\|distribution\|provisioning" flutter_build.log | tail -30
            
            echo "=== Export Errors ==="
            grep -i -A 2 -B 2 "exportarchive\|export.*error\|export.*failed" flutter_build.log | tail -20
            
            echo "=== Last 50 lines of build log ==="
            tail -50 flutter_build.log
            
            exit $BUILD_EXIT_CODE
          else
            echo "✅ Flutter build and IPA export completed successfully"
          fi
      - name: Verify IPA file
        run: |
          echo "Checking for IPA files and build artifacts..."
          
          # Check the most likely location first
          if [ -f "build/ios/ipa/flutter_riverpod_tutorial.ipa" ]; then
            echo "✅ IPA file found at expected location: build/ios/ipa/flutter_riverpod_tutorial.ipa"
            IPA_FILE="build/ios/ipa/flutter_riverpod_tutorial.ipa"
          else
            echo "=== Searching for IPA files in all locations ==="
            IPA_FILE=$(find . -name "*.ipa" -type f 2>/dev/null | head -1)
            
            if [ -n "$IPA_FILE" ]; then
              echo "✅ IPA file found at: $IPA_FILE"
            else
              echo "❌ No IPA file found anywhere"
              echo "=== Debugging: Complete build structure ==="
              find build -type f 2>/dev/null | sort || echo "No build directory found"
              
              echo "=== Checking for archive files ==="
              find . -name "*.xcarchive" -type d 2>/dev/null | while read archive; do
                echo "Archive found: $archive"
                ls -la "$archive/Products/Applications/" 2>/dev/null || echo "No app in archive"
              done
              
              echo "=== Checking build logs for errors ==="
              if [ -f "xcodebuild_export.log" ]; then
                echo "Export log errors:"
                grep -i "error\|fail\|denied" xcodebuild_export.log | tail -10 || echo "No obvious errors in export log"
              fi
              
              if [ -f "xcodebuild_archive.log" ]; then
                echo "Archive log errors:"
                grep -i "error\|fail\|denied" xcodebuild_archive.log | tail -10 || echo "No obvious errors in archive log"
              fi
              
              echo "=== Checking iOS build directory ==="
              ls -la build/ios/ 2>/dev/null || echo "build/ios/ directory does not exist"
              
              exit 1
            fi
          fi
          
          # Verify the IPA file is valid
          echo "=== IPA File Details ==="
          ls -lh "$IPA_FILE"
          file "$IPA_FILE"
          
          # Set environment variable for next steps
          echo "IPA_PATH=$IPA_FILE" >> $GITHUB_ENV
          echo "✅ IPA verification completed successfully"
      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: ${{ env.IPA_PATH }}
          retention-days: 7

  distribute-ios:
    needs: build-ios
    runs-on: ubuntu-latest
    steps:
      - name: Download IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-app
          path: ./
      - name: List downloaded files
        run: |
          echo "Downloaded files:"
          ls -la ./
          
          # The IPA should be named flutter_riverpod_tutorial.ipa based on your project
          if [ -f "flutter_riverpod_tutorial.ipa" ]; then
            echo "✅ Found flutter_riverpod_tutorial.ipa"
            mv flutter_riverpod_tutorial.ipa app-release.ipa
          else
            # Fallback: look for any IPA file
            IPA_FILES=(*.ipa)
            if [ -f "${IPA_FILES[0]}" ]; then
              echo "✅ Found IPA file: ${IPA_FILES[0]}, renaming to app-release.ipa"
              mv "${IPA_FILES[0]}" app-release.ipa
            else
              echo "❌ No IPA file found in downloaded artifacts"
              echo "Available files:"
              ls -la ./
              exit 1
            fi
          fi
          
          echo "Final file check:"
          ls -la ./app-release.ipa
          file app-release.ipa
      - name: Upload IPA to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          token: ${{ secrets.FIREBASE_CLI_TOKEN }}
          groups: testers
          file: app-release.ipa
          releaseNotes: "Automatic build from GitHub Actions (Commit: ${{ github.sha }})"

name: Flutter CI/CD with Firebase Distribution

on:
  push:
    branches: [ main ]

jobs:
  # build-android:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       flutter-version: '3.29.2'
  #       channel: 'stable'
    
  #   - name: Install dependencies
  #     run: flutter pub get
    
  #   - name: Build APK
  #     run: flutter build apk 
  #     env:
  #       ANDROID_SDK_ROOT: /usr/lib/android-sdk
        
  #   - name: Upload APK to Firebase App Distribution
  #     uses: wzieba/Firebase-Distribution-Github-Action@v1
  #     with:
  #       appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
  #       token: ${{ secrets.FIREBASE_CLI_TOKEN }}
  #       groups: testers  # or your preferred group
  #       file: build/app/outputs/flutter-apk/app-release.apk
  #       releaseNotes: "Automatic build from GitHub Actions (Commit: ${{ github.sha }})"

  #   - name: Upload APK as artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: app-release.apk
  #       path: build/app/outputs/flutter-apk/app-release.apk
  #       retention-days: 7


  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      - name: Install dependencies
        run: flutter pub get
      - name: Install Apple certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
      - name: Install provisioning profile (manual)
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # Decode and save the provisioning profile
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > /tmp/profile.mobileprovision
          # Try to extract UUID using different methods
          echo "Attempting to extract UUID from provisioning profile..."
          if command -v security >/dev/null 2>&1; then
            UUID=$(security cms -D -i /tmp/profile.mobileprovision 2>/dev/null | plutil -extract UUID raw - 2>/dev/null || echo "")
          fi
          if [ -z "$UUID" ]; then
            echo "Security method failed, trying openssl..."
            UUID=$(openssl smime -verify -inform DER -in /tmp/profile.mobileprovision -noverify 2>/dev/null | plutil -extract UUID raw - 2>/dev/null || echo "")
          fi
          if [ -z "$UUID" ]; then
            echo "UUID extraction failed, using timestamp-based filename..."
            UUID="profile-$(date +%s)"
          fi
          echo "Using filename: $UUID.mobileprovision"
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          # List installed profiles for verification
          echo "Installed profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          # Try to verify the profile contains our bundle identifier
          echo "Checking profile content..."
          if security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision 2>/dev/null | grep -q "com.example.flutterRiverpodTutorial"; then
            echo "✅ Bundle ID found in provisioning profile"
          else
            echo "⚠️  Bundle ID not found in profile, but continuing..."
          fi
      - name: Build IPA
        run: |
          echo "Starting Flutter IPA build..."
          flutter build ipa \
            --dart-define=APP_ENV=production \
            --export-options-plist=ios/ExportOptions.plist \
            --verbose \
            --codesign
          
          BUILD_EXIT_CODE=$?
          echo "Flutter build exit code: $BUILD_EXIT_CODE"
          
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "❌ Flutter build failed with exit code $BUILD_EXIT_CODE"
            exit $BUILD_EXIT_CODE
          else
            echo "✅ Flutter build completed successfully"
          fi
      - name: Verify IPA file
        run: |
          echo "Checking for IPA files..."
          echo "=== Complete build directory structure ==="
          find build -type f 2>/dev/null | sort
          
          echo "=== Searching for IPA files specifically ==="
          find . -name "*.ipa" -type f 2>/dev/null || echo "No IPA files found anywhere"
          
          echo "=== Checking expected IPA location ==="
          if [ -d "build/ios/ipa" ]; then
            echo "Contents of build/ios/ipa/:"
            ls -la build/ios/ipa/
          else
            echo "build/ios/ipa/ directory does not exist"
          fi
          
          echo "=== Checking archive location ==="
          if [ -d "build/ios/archive" ]; then
            echo "Contents of build/ios/archive/:"
            ls -la build/ios/archive/
            # Sometimes IPA is inside the archive
            find build/ios/archive -name "*.ipa" -type f 2>/dev/null || echo "No IPA in archive"
          else
            echo "build/ios/archive/ directory does not exist"
          fi
          
          # Check if any IPA was created anywhere
          IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "✅ IPA file found at: $IPA_FILE"
            file "$IPA_FILE"
            echo "IPA_PATH=$IPA_FILE" >> $GITHUB_ENV
          else
            echo "❌ No IPA file found anywhere"
            echo "=== Build exit status check ==="
            echo "Flutter build seems to have completed, but no IPA was generated."
            echo "This might be a signing or export configuration issue."
            exit 1
          fi
      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: ${{ env.IPA_PATH }}
          retention-days: 7

  distribute-ios:
    needs: build-ios
    runs-on: ubuntu-latest
    steps:
      - name: Download IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-app
          path: ./
      - name: List downloaded files
        run: |
          echo "Downloaded files:"
          ls -la ./
          # Look for the specific IPA file (should be flutter_riverpod_tutorial.ipa)
          if [ -f "flutter_riverpod_tutorial.ipa" ]; then
            echo "✅ Found flutter_riverpod_tutorial.ipa"
            mv flutter_riverpod_tutorial.ipa app-release.ipa
          elif [ -f *.ipa ]; then
            echo "✅ Found IPA file, renaming..."
            mv *.ipa app-release.ipa
          else
            echo "❌ No IPA file found"
            exit 1
          fi
          echo "Final file check:"
          ls -la ./
      - name: Upload IPA to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          token: ${{ secrets.FIREBASE_CLI_TOKEN }}
          groups: testers
          file: app-release.ipa
          releaseNotes: "Automatic build from GitHub Actions (Commit: ${{ github.sha }})"

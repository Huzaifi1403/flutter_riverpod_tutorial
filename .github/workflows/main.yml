name: Flutter CI/CD with Firebase Distribution

on:
  push:
    branches: [ main ]

jobs:
  # build-android:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       flutter-version: '3.29.2'
  #       channel: 'stable'
    
  #   - name: Install dependencies
  #     run: flutter pub get
    
  #   - name: Build APK
  #     run: flutter build apk 
  #     env:
  #       ANDROID_SDK_ROOT: /usr/lib/android-sdk
        
  #   - name: Upload APK to Firebase App Distribution
  #     uses: wzieba/Firebase-Distribution-Github-Action@v1
  #     with:
  #       appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
  #       token: ${{ secrets.FIREBASE_CLI_TOKEN }}
  #       groups: testers  # or your preferred group
  #       file: build/app/outputs/flutter-apk/app-release.apk
  #       releaseNotes: "Automatic build from GitHub Actions (Commit: ${{ github.sha }})"

  #   - name: Upload APK as artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: app-release.apk
  #       path: build/app/outputs/flutter-apk/app-release.apk
  #       retention-days: 7

  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Setup CocoaPods
        run: |
          cd ios
          pod install --repo-update
      
      - name: Install Apple certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
      
      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > /tmp/profile.mobileprovision
          
          # Extract UUID from provisioning profile
          UUID=$(security cms -D -i /tmp/profile.mobileprovision | plutil -extract UUID raw -)
          echo "Provisioning Profile UUID: $UUID"
          
          # Copy to correct location
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          # Store UUID for ExportOptions.plist
          echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV
      
      - name: Create ExportOptions.plist
        run: |
          cat > ios/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>66VPE47DN4</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.example.flutterRiverpodTutorial1</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>destination</key>
              <string>export</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <false/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF
      
      - name: Build IPA
        run: |
          flutter build ipa --export-options-plist=ios/ExportOptions.plist
      
      - name: Verify IPA file
        run: |
          if [ -f "build/ios/ipa/flutter_riverpod_tutorial.ipa" ]; then
            echo "✅ IPA file created successfully"
            echo "IPA_PATH=build/ios/ipa/flutter_riverpod_tutorial.ipa" >> $GITHUB_ENV
            ls -lh build/ios/ipa/flutter_riverpod_tutorial.ipa
          else
            echo "❌ IPA file not found"
            find build -name "*.ipa" 2>/dev/null || echo "No IPA files found"
            exit 1
          fi
      
      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: ${{ env.IPA_PATH }}
          retention-days: 7

  distribute-ios:
    needs: build-ios
    runs-on: ubuntu-latest
    steps:
      - name: Download IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-app
          path: ./
      
      - name: List downloaded files
        run: |
          echo "Downloaded files:"
          ls -la ./
          
          # The IPA should be named flutter_riverpod_tutorial.ipa based on your project
          if [ -f "flutter_riverpod_tutorial.ipa" ]; then
            echo "✅ Found flutter_riverpod_tutorial.ipa"
            mv flutter_riverpod_tutorial.ipa app-release.ipa
          else
            # Fallback: look for any IPA file
            IPA_FILES=(*.ipa)
            if [ -f "${IPA_FILES[0]}" ]; then
              echo "✅ Found IPA file: ${IPA_FILES[0]}, renaming to app-release.ipa"
              mv "${IPA_FILES[0]}" app-release.ipa
            else
              echo "❌ No IPA file found in downloaded artifacts"
              echo "Available files:"
              ls -la ./
              exit 1
            fi
          fi
          
          echo "Final file check:"
          ls -la ./app-release.ipa
          file app-release.ipa
      
      - name: Upload IPA to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          token: ${{ secrets.FIREBASE_CLI_TOKEN }}
          groups: testers
          file: app-release.ipa
          releaseNotes: "Automatic build from GitHub Actions (Commit: ${{ github.sha }})"
